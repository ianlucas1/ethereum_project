################################################################################
# Autonomous Agent Starter Prompt — ethereum_project
################################################################################

## Goal

Continuously enhance the ethereum_project code-base while guarding quality,
security, test coverage and maintainability — with **minimal human help**.

## ❶ Phase map

| Phase | What happens | Key artefacts |
|-------|--------------|---------------|
| **A. Fast Δ-Assessment** | `scripts/qa_audit.py` runs. If *no code files changed* since the last baseline ➜ reuse prior scores in `prompts/quality_scoreboard.md` & `quality_scoreboard.json`. If code **did** change ➜ lint, type-check & test **only those files**, compute axis deltas, append a “Δ-audit” row. A full baseline audit runs automatically every Monday or when ticket `AUDIT_FULL` is opened. | scoreboard *.md / .json* |
| **B. Road-map sync** | `scripts/roadmap_sync.py` decides the active ticket, performs rollover (marks previous DONE / next IN PROGRESS) and rewrites §5 of *this* file. | roadmap.jsonl, starter_prompt.txt |
| **C. Implementation** | Feature branch → plan → code → tests → `ruff --fix` → `pytest --cov <changed>` → self-critique. If repeated failures on the *same* root cause ≥5 → stop & report. | commits on feature/… |
| **D. Review & Merge** | Auto-create PR with GitHub CLI; after human merge run post-merge git tidy. | PR body inc. before/after axes |
| **E. Logging** | Append human-readable row to `prompts/development_log.md` **and** structured row to `development_log.jsonl`. | log files |

## ❷ Autonomous Workflow Checklist (machine-readable)

1. **Fast Δ-Assessment**  
   `python scripts/qa_audit.py --mode=delta`  
   → updates quality_scoreboard.*.  
   → if every axis = 100 print `QUALITY PERFECT – all axes 100/100` and halt.
2. **Road-map sync**  
   `python scripts/roadmap_sync.py`  
   • returns JSON to stdout `{active_ticket, branch_slug, low_axes}`.  
   • if `need_rollover: true`, tool already rewrote prompts/ files.
3. **Create branch** `feature/<ticket-id>-<branch_slug>`
4. **Implementation loop** (plan → code → tests → retries).
5. **Final commit & push** — *include* scoreboard files if they changed.
6. **`gh pr create`** with diff-table in body; wait for merge.
7. **Post-merge tidy** (`git checkout main && git pull && git branch -d …`).
8. **Log entry** in both markdown & JSONL.
9. **Loop** back to step 1.

## ❸ Current ticket  (SYNC 7.1)

> *This block is rewritten automatically by `scripts/roadmap_sync.py`.*

**Ticket ID:** `7.1` — *Advanced Feature Engineering*  
**Branch:** `feature/7.1-advanced-feats`

### Tasks
• Add interaction-term feature generation in `data_processing.py`  
• Unit-tests for new features (`tests/test_data_processing.py`)  
• Integrate lag-selection in `run_ardl_analysis` (statsmodels API)  
• Update tests (`tests/test_ts_models.py`)  
• Self-critique & docs update if needed

---

## ❹ Key guard-rails (excerpts)

### Quality-guard
• If a repeated edit fails ≥ 2×, attempt a *whole-function rewrite* or revert and refactor incrementally.

### Development & Testing Guard
• Run `pytest --cov <changed-files>` first; full suite only when partial passes → faster loops.  
• Stage files **again** after pre-commit auto-fixes.  
• Commit scoreboard changes with `chore(qa): audit`.

### Dependency Guard
• Dev-tools required: `radon`, `xenon`, `coverage`, `safety`, `pytest-cov`.

### Version-control Guard
• After each sub-step passes, `git commit -m 'chore(wip): checkpoint-<n>'` — enables quick rollback.  
