Category,Sub-Category,Name,Description,Reason,Status
CI & Checks,PR status checks,0.7: Check PR Status with gh pr checks,Check PR CI status,Verify the agent can get a PR’s check status via GitHub CLI.,Completed
CI & Checks,PR status checks,0.7b: Check PR Status with gh pr checks --watch (Alternative Attempt),Watch PR status until done,See if `gh pr checks --watch` updates check status continuously until completion.,Completed
CI & Checks,PR status checks,0.7c: Re-check PR Status with gh pr checks (Post-Completion),Confirm final PR status,Ensure the agent can retrieve the final check results after all checks complete.,Completed
CI & Checks,PR status checks,2-4: All-Pass checks with pager disabled,List all checks without pager,Ensure all check results are visible by disabling the pager in `gh pr checks` output.,Completed
CI & Checks,PR status checks,2-5: Deliberate failing check (Bandit B101 Invasive),Trigger failing check,Validate the agent’s ability to recognize a failing check by introducing a Bandit B101 error.,Completed
CI & Checks,Re-run CI,3-8: Re-run failed CI checks,Rerun all failed jobs,Confirm the agent can programmatically re-run failed CI jobs to attempt to get a passing build.,Planned
CI & Checks,Failing checks merge,3-9: Merge with failing checks,Merge PR with failing checks,Test the agent’s response when attempting to merge a PR with failing required checks (should be blocked).,Completed
CI & Checks,CI log retrieval,4-10: Extract failing-check URLs,Extract URLs of failed checks,Ensure the agent can retrieve the URLs for failing CI checks from the check summary output.,Planned
CI & Checks,CI log retrieval,4-11: Fetch & summarise CI logs,Fetch logs & summarize errors,Verify the agent can retrieve raw logs of a failed job and produce a concise summary of the failure.,Completed
CI & Checks,CI log analysis,10-1: Fetch log for failed job,Fetch log of failed job,Test whether the agent can programmatically fetch the log output of a specific failed CI job.,Planned
CI & Checks,CI log analysis,10-2: Summarise traceback,Summarize error traceback,Ensure the agent can interpret a CI job log and produce a short natural-language summary of the error.,Planned
CI & Checks,CI log analysis,10-3: Tag failure class,Categorize failure cause,Check if the agent can classify the cause of a CI failure (e.g. code bug vs config issue vs flake).,Planned
Merge Handling,Merge queue handling,5-1: Detect merge-queue block,Detect merge-queue block,Confirm the agent detects the 'out-of-date' block on a PR when the base branch (main) has advanced.,Planned
Merge Handling,Merge queue handling,5-2: Auto-rebase & re-push,Rebase branch and push update,Check that the agent can automatically rebase its PR onto the updated main then force-push and merge once CI is green.,Planned
Merge Handling,Basic PR merge,0.8: Merge Pull Request with gh pr merge,Merge PR via CLI,Verify the agent can perform a PR merge using the GitHub CLI once all checks have passed.,Completed
Merge Handling,Basic PR merge,0.9: Ensure Local main is Up-to-Date Post-Merge,Update local main after merge,Ensure the agent updates the local main branch to sync the newly merged changes.,Completed
Secret Scanning,Push-protection,7-1: Intentionally push dummy secret,Push commit containing secret,Test GitHub’s push-protection by having the agent commit a dummy secret and attempt to push it expecting a rejection.,Planned
Secret Scanning,Push-protection,7-2: Auto-redact & re-push,Remove secret and push again,Verify the agent can detect the secret causing the push rejection remove it amend the commit and push successfully.,Planned
Dependency Automation,Dependabot PRs,8-1: Poll Dependabot PRs,List open Dependabot PRs,Test if the agent can identify open Dependabot pull requests (via `gh pr list` or API).,Planned
Dependency Automation,Dependabot PRs,8-2: Merge if green / open issue if red,Merge or report per CI outcome,Ensure the agent automatically merges Dependabot PRs when CI passes or files a detailed issue if CI fails.,Planned
Context Mgmt,Scratchpad trimming,9-1: Token-count monitor,Trim scratchpad at token limit,Demonstrate that the agent monitors its context length and when it exceeds a threshold writes a summary and trims it.,Completed
Pre-commit & Policies,File limit hook,12-1: Add pre-commit hook to limit staged files (<25),Enforce limit on staged files,Introduce a pre-commit hook that prevents the agent from staging more than 24 files at once.,Completed
Pre-commit & Policies,Push frequency check,12-2: Add CI check for push frequency (>5 commits),Enforce commit frequency limit,Add a CI policy that fails if the agent tries to push a branch with too many commits.,Completed
Pre-commit & Policies,Integration rules,12-3: Refine README hygiene rules (log first, final sync),Refine repo hygiene guidelines. Incorporate stricter guidelines in the README about always logging changes first and performing a final sync at run end.,Completed
Queue Awareness,Multi-PR management,11-1: List self-authored PRs,List agent's own PRs,Verify the agent can retrieve a list of its own open pull requests using the CLI.,Planned
Queue Awareness,Multi-PR management,11-2: Cancel or update conflicting PR,Handle conflict between PRs,Ensure the agent detects conflicts between its own PRs and resolves them by closing or updating one of the PRs.,Planned
Quick Wins,Bandit config,3-10: Align flake8 and Bandit CI config with local settings,Align flake8 & Bandit settings,Ensure consistency between local linting (flake8/Bandit) and CI by updating CI configuration to match local settings.,Completed
Quick Wins,Bandit config,3-11: Fix Bandit pre-commit hook,Fix Bandit pre-commit hook,Fix an error in the Bandit pre-commit hook so that it runs correctly and passes when no issues are present.,Completed
Maintenance,Too-many-files hook,MAINT A: Improve 'too-many-files' Hook Error Message,Clarify file-limit hook error,Improve the clarity of the error message produced by the 'too-many-files' pre-commit hook.,Planned
Maintenance,Too-many-files hook,MAINT B: Add CI Test for 'too-many-files' Hook,Add test for file-limit hook,Add an automated CI test to ensure the 'too-many-files' hook triggers as expected and remains functional.,Planned
Other,Branch Protection,Initial Setup: Querying Branch Protection Rules for main (Attempt 1),Query branch protection API,Attempt to directly fetch the branch protection settings for the main branch via the GitHub API.,Planned
Other,Branch Protection,Initial Setup: Querying Repository Info for Branch Protection Field (Attempt 2),Query branch protection field,Use a different approach (repository metadata) to query branch protection details after the direct API call failed.,Planned
Other,Branch Protection,Initial Setup: Querying Branch Protection Rules with --jq . (Attempt 3),Retry branch protection query,Try again to get branch protection rules this time including a `jq` filter for proper output formatting.,Planned
Other,Baseline PR workflow,0.1: Make a Trivial File Change,Create a trivial file change,Provide a simple file edit as initial content for testing the PR workflow.,Completed
Other,Baseline PR workflow,0.2: Create New Git Branch,Create new git branch,Ensure the agent operates on a separate branch by creating a new branch for the experimental change.,Completed
Other,Baseline PR workflow,0.3: Stage Changes with git add,Stage changes with git add,Test that the agent can stage the modified file (using git add) in preparation for committing.,Completed
Other,Baseline PR workflow,0.4: Commit Staged Changes with git commit,Commit staged changes,Verify that the agent can successfully commit the staged changes to the repository (triggering any commit hooks).,Completed
Other,Baseline PR workflow,0.5: Push Branch to Remote with git push,Push branch to remote,Confirm the agent can push the new branch to the remote repository which is required to open a PR and trigger CI.,Completed
Other,Baseline PR workflow,0.6: Create Pull Request with gh pr create,Create pull request via CLI,Have the agent create a pull request using the CLI marking the start of the review and CI process.,Completed
Other,Baseline PR workflow,0.10: Clean Up Temporary Experiment File,Delete temporary file,Remove the temporary file used for the experiment to clean up the repository after the test.,Completed
Other,Environment config,Environment Hardening: Set Pager Variables & Verify,Disable pager verify output,Make sure CLI outputs are not paginated (and thus fully visible to the agent) by configuring pager settings accordingly.,Planned
Other,Remediation loop,6-1: Failing test already in repo,Use existing failing test,Establish a baseline by using an existing failing test (PR #120) as the starting point for remediation.,Planned
Other,Remediation loop,6-2a: Generate minimal fix,Generate minimal code fix,Have the agent attempt to generate the simplest possible code change that would make the failing test pass.,Planned
Other,Remediation loop,6-2b: Apply fix & verify,Apply fix & verify tests,Verify the agent can apply the fix and push it so that CI passes and the PR auto-merges and closes.,Planned
Other,Run finalization,Finalizing Run 5: Pushing All Changes and Merging PR #122,Push changes and merge PR,Ensure the agent concludes the run by pushing remaining changes and creating a final PR that passes CI and merges.,Planned
Other,Run finalization,"Docs: Integrate Staged Documentation Updates (Log Restructure, README, Plan)",Commit staged docs updates,Ensure all pending documentation updates (log format README plan changes) are committed before concluding the run.,Planned
